#version 440

//uniforms
uniform mat4 MVP;
uniform vec3 eye_pos;

layout(lines) in; 		// set input type to triangles - 3 vertices
layout(triangle_strip, max_vertices = 10) out;											// set output to line_strip - 2 vertices
	
// incomings
layout(location = 0) in vec3 positions[];

// outgoings
layout(location = 0) out vec3 out_pos;
layout(location = 10) out vec2 out_tex_coord;



void main() {
	vec3 midpoint = (positions[0] - positions[1]);
	midpoint /= 2.0f;
	midpoint = positions[1] + midpoint;
	vec3 y_axis = normalize(positions[0] - positions[1]);

	vec3 from_eye = midpoint - eye_pos;

	vec3 x_axis = normalize(cross(from_eye, y_axis));

	// set rain vertex positions
	vec3[2] positions_transformed;
	positions_transformed[0] = vec3(positions[0].x, positions[0].y + 0.4 * y_axis.y, positions[0].z);
	positions_transformed[1] = positions[1];

	vec3[4] points;
	points[0] = positions_transformed[1] + 0.05 * x_axis;
	points[1] = positions_transformed[0] + 0.05 * x_axis;
	points[2] = positions_transformed[0] - 0.05 * x_axis;
	points[3] = positions_transformed[1] - 0.05 * x_axis;

	vec2[4] tex_coord;
	tex_coord[0] = vec2(0.0f, 1.0f);
	tex_coord[1] = vec2(0.0f, 0.0f);
	tex_coord[2] = vec2(1.0f, 0.0f);
	tex_coord[3] = vec2(1.0f, 1.0f);

	// draw rain
	out_pos = points[0];
	out_tex_coord = tex_coord[0];
	gl_Position = MVP * vec4(points[0], 1);
	EmitVertex();

	out_pos = points[1];
	out_tex_coord = tex_coord[1];
	gl_Position = MVP * vec4(points[1], 1);
	EmitVertex();

	out_pos = points[2];
	out_tex_coord = tex_coord[2];
	gl_Position = MVP * vec4(points[2], 1);
	EmitVertex();

	EndPrimitive();


	
	out_pos = points[0];
	out_tex_coord = tex_coord[0];
	gl_Position = MVP * vec4(points[0], 1);
	EmitVertex();

	out_pos = points[2];
	out_tex_coord = tex_coord[2];
	gl_Position = MVP * vec4(points[2], 1);
	EmitVertex();

	out_pos = points[3];
	out_tex_coord = tex_coord[3];
	gl_Position = MVP * vec4(points[3], 1);
	EmitVertex();

	EndPrimitive();
}