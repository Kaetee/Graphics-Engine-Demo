#version 440

//uniforms
uniform mat4 MVP;
uniform mat3 N;

uniform float time;

uniform float tile_size;

uniform bool create_waves;

layout(triangles) in;															// set input type to triangles - 3 vertices
layout(triangle_strip, max_vertices = 10) out;										// set output to line_strip - 2 vertices
	
// incomings
layout(location = 0) in vec3 positions[];
layout(location = 2) in vec3 vertex_normal[];
layout(location = 3) in vec3 vertex_binormal[];
layout(location = 4) in vec3 vertex_tangent[];
layout(location = 10) in vec2 vertex_tex_coords[];

// outgoings
layout(location = 0) out vec3 out_pos;
layout(location = 2) out vec3 out_normal;
layout(location = 3) out vec3 out_binormal;
layout(location = 4) out vec3 out_tangent;
layout(location = 10) out vec2 out_tex_coord[2];



void main() {

	// The 
	vec3 position_current;
	vec3[6] positions_adjacent;
	float[6] distance_adjacent_0;
	float[6] distance_adjacent_1;
	float dY_adjacent[6];
	vec3 sides[2];

	if (1 == 1) {

		// draw meshes wireframe 
		if (create_waves) {
			for (int i = 0; i < gl_in.length(); ++i) {
				float height_mult = 1.5;
				positions_adjacent[0] = positions[i] + tile_size * vec3(-1.0, 0.0, -1.0);
				positions_adjacent[1] = positions[i] + tile_size * vec3(-1.0, 0.0, 0.0);
				positions_adjacent[2] = positions[i] + tile_size * vec3(0.0, 0.0, 1.0);

				positions_adjacent[3] = positions[i] + tile_size * vec3(1.0, 0.0, 1.0);
				positions_adjacent[4] = positions[i] + tile_size * vec3(1.0, 0.0, 0.0);
				positions_adjacent[5] = positions[i] + tile_size * vec3(0.0, 0.0, -1.0);

				float distance_0 = length(vec2(positions[i].x, positions[i].z) - vec2(positions[i].z, positions[i].z));
				float distance_1 = length(vec2(positions[i].x, positions[i].z) - vec2(0.0, 0.0));
				float dY = height_mult * (sin(time + distance_0 / 32.0) + (cos(time + distance_1 / 8.0) / 2.0)) / 1.5;

				position_current = positions[i] + vec3(0.0, dY, 0.0);

				for (int i = 0; i < 6; i++){
					distance_adjacent_0[i] = length(vec2(positions_adjacent[i].x, positions_adjacent[i].z) - vec2(positions_adjacent[i].z, positions_adjacent[i].z));
					distance_adjacent_1[i] = length(vec2(positions_adjacent[i].x, positions_adjacent[i].z) - vec2(0.0, 0.0));
					dY_adjacent[i] = height_mult * (sin(time + distance_adjacent_0[i] / 32.0) + (cos(time + distance_adjacent_1[i] / 8.0) / 2.0)) / 1.5;
					positions_adjacent[i] += vec3(0.0, dY_adjacent[i], 0.0);
				}

				vec3 new_normal = vec3(0.0);

				// because i is an integer, i / 5 will be 0 until i >= 5.
				// This means that only on the last iteration, 2 positions_adjacent values will be (5, 0)
				for (int i = 0; i < 6; i++){
					sides[0] = position_current - positions_adjacent[i];
					sides[1] = position_current - positions_adjacent[(i + 1) - 5 * (i / 5)];
					new_normal += cross(sides[0], sides[1]);
				}

				new_normal = normalize(new_normal);


				out_normal = N * new_normal;
				out_binormal = N * cross(new_normal, vec3(0.0, 0.0, 1.0));
				out_tangent = N * cross(new_normal, vec3(1.0, 0.0, 0.0));
				out_pos = position_current;
				out_tex_coord[0] = vertex_tex_coords[i] + vec2(time / (3.14159265) / 2);
				out_tex_coord[1] = vertex_tex_coords[i] - vec2(time / (3.14159265) / 4);

				gl_Position = MVP * vec4(position_current, 1.0);
				EmitVertex();
			}
		}

		else {
			for (int i = 0; i < gl_in.length(); ++i) {
				out_normal = vertex_normal[i];
				out_binormal = vertex_binormal[i];
				out_tangent = vertex_tangent[i];
				out_tex_coord[0] = vertex_tex_coords[i] + vec2(time / (3.14159265) / 2);
				out_tex_coord[1] = vertex_tex_coords[i] - vec2(time / (3.14159265) / 4);
				out_pos = positions[i];

				gl_Position = MVP * vec4(positions[i], 1.0);
				EmitVertex();
			}
		}
		EndPrimitive();						
	}
}